version: '3.0'

services:
  db:
    image: postgres:15.1-alpine
    hostname: ${POSTGRES_HOSTNAME:-db}
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-l4n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?err}
  web:
    # Change this from "main" to a tag if you do not want to use the
    # "edge" image from the main branch
    image: ghcr.io/adrian-hirt/l4n:main
    # Create DB if it does not exist, Migrate the DB, update the whenever crontabs, start cron and then start the server
    command: bash -c "rails db:prepare && whenever --update-crontab && service cron start && rails s -p 3000 -b '0.0.0.0'"
    networks:
      - reverse_proxy
      - default
    ports:
      - "3000:3000"
    depends_on:
      - db
    env_file: .env
    volumes:
      - storage-data:/app/storage
    environment:
      # Enable YJIT
      RUBY_YJIT_ENABLE: true
      # Set defaults for running server
      RAILS_ENV: production
      RAILS_SERVE_STATIC_FILES: true
      # Database
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME:-db}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?err}
      POSTGRES_USER: ${POSTGRES_USER:-l4n}
      # Application setting
      APPLICATION_DOMAIN: ${APPLICATION_DOMAIN:?err}
      # Mailer
      USE_SMTP: ${USE_SMTP:-false}
      # ActiceRecord encryption
      SECRET_KEY_BASE: ${SECRET_KEY_BASE:?err}
      AR_PRIMARY_KEY: ${AR_PRIMARY_KEY:?err}
      AR_DETERMINISTIC_KEY: ${AR_DETERMINISTIC_KEY:?err}
      AR_KEY_DERIVATION_SALT: ${AR_KEY_DERIVATION_SALT:?err}
      # Securing the registration
      RECAPTCHA_SITE_KEY: ${RECAPTCHA_SITE_KEY:?err}
      RECAPTCHA_SITE_SECRET: ${RECAPTCHA_SITE_SECRET:?err}
      # Gameaccounts
      STEAM_WEB_API_KEY: ${STEAM_WEB_API_KEY:?err}
      DISCORD_ID: ${DISCORD_ID:?err}
      DISCORD_SECRET: ${DISCORD_SECRET:?err}
      DISCORD_BOT_AUTH: ${DISCORD_BOT_AUTH:?err}
      # Exception notification
      ENABLE_EXCEPTION_NOTIFIER: ${ENABLE_EXCEPTION_NOTIFIER:-false}
      EXCEPTION_NOTIFIER_RECIPIENTS: ${EXCEPTION_NOTIFIER_RECIPIENTS}
      EXCEPTION_NOTIFIER_SENDER: ${EXCEPTION_NOTIFIER_SENDER}
      # Devise
      DEVISE_MAIL_SENDER: ${DEVISE_MAIL_SENDER}
      # RSA private key for OIDC
      OIDC_RSA_PRIVATE_KEY: ${OIDC_RSA_PRIVATE_KEY:?err}
    labels:
      - traefik.enable=true
      - traefik.docker.network=reverse_proxy
      - traefik.http.routers.${ROUTER_NAME:-l4n}.rule=Host(`${APPLICATION_DOMAIN:-localhost}`)
      - traefik.http.routers.${ROUTER_NAME:-l4n}.tls.certresolver=letsencrypt
volumes:
  db-data:
  storage-data:
networks:
  reverse_proxy:
    name: reverse_proxy