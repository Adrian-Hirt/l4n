- total_rounds = phase.rounds.count
- total_visible_rounds = total_rounds / 2

.card
  .card-header.d-flex.justify-content-between.align-items-center
    %h4.mb-0= "#{phase.phase_number}. #{phase.name}"
    .text-muted= phase.humanized_tournament_mode
  .card-body
    .mb-2= _('Phase|Double elimination upper bracket')
    .double-elimination-tournament-tree.mb-4
      - phase.rounds.order(:round_number).each do |round|
        - next if round.lower_bracket_only?

        -# Calculate the number of matches, which is 2 to the power of
        -# "current_round index", where the final has index 0 and earlier
        -# rounds have higher indices. We divide by 2 because we have double
        -# the rounds because of the lower bracket, and then make sure we
        -# have at least 1 match (for the last round).
        - number_of_matches = (2 ** ((round.round_number / 2) - total_visible_rounds).abs) / 2
        - number_of_matches = [1, number_of_matches].max

        -# Add one horizontal line when we're in the last round
        - if round.last_round?
          .round-connectors-horizontal
            %div

        .tournament-round
          - if round.matches.any?
            - if round.upper_bracket_only?
              - relevant_matches = round.matches.order(:id).includes(away: :team, home: :team)
            - else
              - relevant_matches = round.matches.order(:id).includes(away: :team, home: :team).first(number_of_matches)

            - relevant_matches.each do |match|
              - content_for :match, flush: true do
                .d-flex.justify-content-between
                  .matchteam
                    = match.home.name
                  .matchscore
                    = format_match_score(match, :home)
                .d-flex.justify-content-between
                  .matchteam
                    = match.away&.name || _('Match|Bye')
                  .matchscore
                    = format_match_score(match, :away)

              - if can_update_result?(match)
                %a.match{href: edit_match_path(match)}
                  = yield :match
              - else
                .match
                  = yield :match

          - else
            - number_of_matches.times do
              .match
                .d-flex.justify-content-between
                  .matchteam
                    = _('Match|Tbd')
                  .matchscore
                    &mdash;
                .d-flex.justify-content-between
                  .matchteam
                    = _('Match|Tbd')
                  .matchscore
                    &mdash;

        -# We don't need to do this after the last match
        - next if round.last_round?

        -# Generate the outgoing horizontal connectors
        .round-connectors-horizontal
          - number_of_matches.times do
            %div

        -# Generate the vertical connectors
        .round-connectors-vertical{class: round_matches_to_inverse_round_index_word(number_of_matches)}
          - (number_of_matches / 2).times do
            %div

        -# Finally, generate the incoming horizontal connectors
        .round-connectors-horizontal
          - (number_of_matches / 2).times do
            %div


    .mb-2= _('Phase|Double elimination lower bracket')
    .double-elimination-tournament-tree.mb-3
      - phase.rounds.order(:round_number).each_with_index do |round, index|
        - next if round.upper_bracket_only?

        - number_of_matches = (2 ** ((round.round_number / 2) - total_visible_rounds).abs) / 2
        - number_of_matches = [1, number_of_matches].max

        .tournament-round
          - if round.matches.any?
            - if round.lower_bracket_only?
              - relevant_matches = round.matches.order(:id).includes(away: :team, home: :team)
            - else
              - relevant_matches = round.matches.order(:id).includes(away: :team, home: :team).last(number_of_matches)

            - relevant_matches.each do |match|
              - content_for :match, flush: true do
                .d-flex.justify-content-between
                  .matchteam
                    = match.home.name
                  .matchscore
                    = format_match_score(match,  :home)
                .d-flex.justify-content-between
                  .matchteam
                    = match.away&.name || _('Match|Bye')
                  .matchscore
                    = format_match_score(match, :away)

              - if can_update_result?(match)
                %a.match{href: edit_match_path(match)}
                  = yield :match
              - else
                .match
                  = yield :match
          - else
            - number_of_matches.times do
              .match
                .d-flex.justify-content-between
                  .matchteam
                    = _('Match|Tbd')
                  .matchscore
                    &mdash;
                .d-flex.justify-content-between
                  .matchteam
                    = _('Match|Tbd')
                  .matchscore
                    &mdash;

        -# We don't need to do this after the last match


        -# If we're in a "lower bracket only" round, we draw the
        -# connectors as usual, otherwise we only draw the horizontal
        -# lines.
        - if round.lower_bracket_only?
          -# Generate the outgoing horizontal connectors
          .round-connectors-horizontal
            - number_of_matches.times do
              %div
          -# Generate the vertical connectors
          .round-connectors-vertical{class: round_matches_to_inverse_round_index_word(number_of_matches)}
            - (number_of_matches / 2).times do
              %div

          -# Finally, generate the incoming horizontal connectors
          .round-connectors-horizontal
            - (number_of_matches / 2).times do
              %div
        - else
          -# Generate the outgoing horizontal connectors
          .round-connectors-horizontal
            - number_of_matches.times do
              %div
          .round-connectors-horizontal
            - number_of_matches.times do
              %div
