.row
  .col-md-12
    .card
      .card-header
        = _('Phase|Rounds')
      .card-body
        - round_matches_count = model.rounds.first.matches.count

        .swiss-tournament-tree
          - model.rounds.order(:round_number).includes(:matches).each do |round|
            .round.py-2.mb-3
              .mb-3
                %h4.d-inline
                  = _('Round number %{number}') % { number: round.round_number }
                - if model.current_round == round
                  %span.badge.bg-secondary.fw-normal= _('Phase|Current round')
              - if round.matches.any?
                - round.matches.order(:id).includes(away: :team, home: :team).each do |match|
                  %a.swiss-match-card{href: admin_match_path(match)}
                    .d-flex.justify-content-between
                      .matchteam
                        = match.home.team.name
                      .matchscore
                        = format_match_score(match,  :home)
                    .d-flex.justify-content-between
                      .matchteam
                        = match.away&.team&.name || _('Match|Bye')
                      .matchscore
                        = format_match_score(match, :away)
              - else
                -# If we have not yet generated the matches for the round, we just take
                -# the number of rounds from the first round and add "TBD" everywhere
                - round_matches_count.times do |index|
                  .swiss-match-card
                    .d-flex.justify-content-between
                      .matchteam
                        = _('Match|Tbd')
                      .matchscore
                        &mdash;
                    .d-flex.justify-content-between
                      .matchteam
                        = _('Match|Tbd')
                      .matchscore
                        &mdash;
